/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.pepsoft.worldpainter.layers.renderers;

import java.awt.*;
import java.awt.image.BufferedImage;

import static java.awt.Color.ORANGE;
import static javax.swing.SwingUtilities.getWindowAncestor;

/**
 *
 * @author pepijn
 */
public class PaintPicker extends javax.swing.JPanel {
    /**
     * Creates new form PaintPicker
     */
    public PaintPicker() {
        initComponents();
        updatePreview();
    }

    public Object getPaint() {
        if (colour != null) {
            return colour;
        } else {
            return pattern;
        }
    }

    public void setPaint(Object paint) {
        if (paint instanceof Color) {
            colour = (Color) paint;
            pattern = null;
        } else if (paint instanceof BufferedImage) {
            pattern = (BufferedImage) paint;
            colour = null;
        } else {
            throw new IllegalArgumentException("Paint type " + paint.getClass() + " not supported");
        }
        updatePreview();
    }

    public float getOpacity() {
        return opacity;
    }

    public void setOpacity(float opacity) {
        if (opacity != this.opacity) {
            this.opacity = opacity;
            updatePreview();
        }
    }

    public boolean isOpacityEnabled() {
        return opacityEnabled;
    }

    public void setOpacityEnabled(boolean opacityEnabled) {
        if (opacityEnabled != this.opacityEnabled) {
            this.opacityEnabled = opacityEnabled;
        }
    }

    @Override
    public int getBaseline(int width, int height) {
        return buttonPickPaint.getBaseline(width, height);
    }

    private void updatePreview() {
        if (colour != null) {
            rendererPreviewer1.setColour(colour);
        } else if (pattern != null) {
            rendererPreviewer1.setPattern(pattern);
        }
        rendererPreviewer1.setOpacity(opacity);
    }
    
    private void pickPaint() {
        final EditPaintDialog dialog = new EditPaintDialog(getWindowAncestor(this), (colour != null) ? colour : pattern, opacity, opacityEnabled);
        dialog.setVisible(true);
        if (! dialog.isCancelled()) {
            final Object paint = dialog.getSelectedPaint();
            if (paint instanceof Color) {
                colour = (Color) paint;
                pattern = null;
            } else {
                pattern = (BufferedImage) paint;
                colour = null;
            }
            if (opacityEnabled) {
                opacity = dialog.getSelectedOpacity();
            }
            updatePreview();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rendererPreviewer1 = new org.pepsoft.worldpainter.layers.renderers.RendererPreviewer();
        buttonPickPaint = new javax.swing.JButton();

        rendererPreviewer1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        rendererPreviewer1.setPreferredSize(new java.awt.Dimension(64, 0));

        buttonPickPaint.setText("...");
        buttonPickPaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPickPaintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(rendererPreviewer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonPickPaint))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonPickPaint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rendererPreviewer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonPickPaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPickPaintActionPerformed
        pickPaint();
    }//GEN-LAST:event_buttonPickPaintActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPickPaint;
    private org.pepsoft.worldpainter.layers.renderers.RendererPreviewer rendererPreviewer1;
    // End of variables declaration//GEN-END:variables

    private Color colour = ORANGE;
    private BufferedImage pattern;
    private float opacity = 1.0f;
    private boolean opacityEnabled = true;
}